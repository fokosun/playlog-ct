<?php

namespace Tests\Unit\Services;

use Playlog\User;
use Tests\TestCase;
use Playlog\Comment;
use Playlog\Services\CommentService;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class CommentServiceTest extends TestCase
{
	use DatabaseMigrations, DatabaseTransactions;

	protected User $user;

	public function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->user = factory(User::class)->create();
	}

	/**
	 * @test
	 */
	public function it_can_create_a_comment()
	{
		$this->actingAs($this->user);

		$service = new CommentService();

		$this->assertTrue($service->store([
			'author_id' => $this->user->first()->getKey(),
			'content' => 'sample content'
		]));

		$this->assertDatabaseHas('comments', [
			'author_id' => $this->user->first()->getKey(),
			'content' => 'sample content'
		]);
	}

	/**
	 * @test
	 */
	public function it_can_return_the_comment_instance()
	{
		$this->actingAs($this->user);

		$service = new CommentService();

		$service->store([
			'author_id' => $this->user->first()->getKey(),
			'content' => 'sample content'
		]);

		$this->assertInstanceOf(Comment::class, $service->getComment());
	}

	/**
	 * @test
	 */
	public function it_can_delete_a_given_comment()
	{
		$this->actingAs($this->user);

		$service = new CommentService();

		$service->store([
			'author_id' => $this->user->first()->getKey(),
			'content' => 'sample content'
		]);

		$comment = $service->getComment();
		$comment->save();

		$this->assertNull($service->delete([
			'comment' => $comment,
			'user' => $this->user->first()
		]));

		$this->assertDatabaseMissing('comments', [
			'author_id' => $this->user->first()->getKey(),
			'content' => 'sample content'
		]);
	}
}
