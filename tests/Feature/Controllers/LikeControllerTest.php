<?php

namespace Tests\Feature\Controllers;

use Playlog\User;
use Tests\TestCase;
use Playlog\Comment;
use Playlog\CommentReaction;
use Illuminate\Http\Response;

class LikeControllerTest extends TestCase
{
	protected User $user;

	public function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		$this->user = factory(User::class)->create();
	}

	/**
	 * @test
	 */
	public function it_responds_with_a_401_if_the_user_is_not_authenticated()
	{
		$this->json('POST', '/likes/' . 0, [])->assertStatus(Response::HTTP_UNAUTHORIZED);
	}

	/**
	 * @test
	 */
	public function it_responds_with_a_404_if_the_comment_reaction_does_not_exist()
	{
		$this->actingAs($this->user);
		$this->json('POST', '/likes/' . 0, [])->assertStatus(Response::HTTP_NOT_FOUND);
	}

	/**
	 * @test
	 */
	public function it_can_increment_the_comment_reaction_likes_by_one()
	{
		$this->actingAs($this->user);
		$this->json('POST', '/comments', ['content' => 'lorem ipsum', 'author_id' => $this->user->getKey()]);

		$comment = Comment::all()->last();

		$this->json('POST', '/reactions', [
			'content' => 'reply to a comment',
			'author_id' => $this->user->getKey(),
			'comment_id' => $comment->getKey()
		]);

		$reaction = CommentReaction::all()->last();

		$this->assertSame(0, $reaction->getLikes());

		$this->json('POST', '/likes/' . $reaction->getKey(), [])->assertStatus(Response::HTTP_FOUND);

		$this->assertSame(1, $reaction->find($reaction->getKey())->getLikes());
	}
}
